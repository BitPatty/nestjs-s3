{"version":3,"file":"s3.util.js","sourceRoot":"/","sources":["common/s3.util.ts"],"names":[],"mappings":";;AACA,sCAAsC;AACtC,yCAAyC;AAEzC,SAAgB,cAAc,CAAC,OAAwB;IAEnD,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;QACd,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,eAAe,EAAE,OAAO,CAAC,eAAe;QACxC,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,MAAM,EAAE,OAAO,CAAC,MAAM;KACzB,CAAC,CAAC;IAEH,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;IAEnF,IAAI,MAAM,GAA2B;QACjC,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,UAAU,EAAE,OAAO;KACtB,CAAC;IAEF,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;IAC9B,OAAO,MAAM,CAAC;AAClB,CAAC;AAlBD,wCAkBC","sourcesContent":["import { S3ConfigOptions } from \"../interfaces/s3-options.interface\";\nimport * as AWS from 'aws-sdk/global';\nimport * as S3 from 'aws-sdk/clients/s3';\n\nexport function createS3Client(options: S3ConfigOptions): S3 {\n\n    AWS.config.update({\n        accessKeyId: options.accessKeyId,\n        secretAccessKey: options.secretAccessKey,\n        sessionToken: options.sessionToken,\n        region: options.region,\n    });\n\n    let version = options.apiVersion === undefined ? '2006-03-01' : options.apiVersion;\n    \n    let params: S3.ClientConfiguration = {\n        endpoint: options.endpoint,\n        apiVersion: version\n    };\n\n    const client = new S3(params);\n    return client;\n}"]}